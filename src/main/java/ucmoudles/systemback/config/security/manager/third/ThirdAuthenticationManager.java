package ucmoudles.systemback.config.security.manager.third;import com.ucs.moudlecommon.domain.SysUsers;import com.ucs.moudlecommon.params.CommonParamsMoudle;import com.ucs.moudlecommon.params.sysuser.Find_UserInfoArg;import com.ucs.moudlecommon.params.sysuser.UserAndRolesInfo;import com.ucs.moudlecommon.response.BaseResponse;import lombok.SneakyThrows;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.security.authentication.AuthenticationManager;import org.springframework.security.authentication.BadCredentialsException;import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;import org.springframework.security.core.Authentication;import org.springframework.security.core.AuthenticationException;import org.springframework.security.core.authority.AuthorityUtils;import org.springframework.stereotype.Component;import ucmoudles.systemback.constant.SignatureConstant;import ucmoudles.systemback.feign.service.Feign_Moudle_User;import java.util.List;import java.util.Objects;/** * @author 9527 * @ClassName WeiBoAuthenticationManager * @Date 2020/2/28 * @Description TODO * @Version 1.0 */@Componentpublic class ThirdAuthenticationManager implements AuthenticationManager {    @Autowired    private Feign_Moudle_User feign_moudle_user;    @SneakyThrows    @Override    public Authentication authenticate(Authentication authentication) throws AuthenticationException {        if(authentication == null || Objects.isNull(authentication.getPrincipal()) || Objects.isNull(authentication.getCredentials())){            throw  new BadCredentialsException("Bad Credentials");        }        CommonParamsMoudle<Find_UserInfoArg> param = new CommonParamsMoudle.Builder(SignatureConstant.commonSignaturePrefix_user,SignatureConstant.commonSignatureSuffix_user,SignatureConstant.commonSignatureKey_user).build();        Find_UserInfoArg arg = (Find_UserInfoArg)authentication.getCredentials();        param.setExtra(arg);        BaseResponse<UserAndRolesInfo> resp = feign_moudle_user.findUserRoleInfo(param);        SysUsers user = resp.getResult().getUsers();        List<String> auths = resp.getResult().getAuths();        if(!resp.isSuccess() || user.getMemStatus() == 1){            throw  new BadCredentialsException("Bad Credentials");        }        return new UsernamePasswordAuthenticationToken(user.getMemNickname(),                user, AuthorityUtils.createAuthorityList(auths.toArray(new String[auths.size()])));    }}