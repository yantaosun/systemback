package ucmoudles.systemback.business;import com.alibaba.fastjson.JSONObject;import com.ucs.moudlecommon.domain.SysUsers;import com.ucs.moudlecommon.params.CommonParamsMoudle;import com.ucs.moudlecommon.params.sysuser.Find_UserInfoArg;import com.ucs.moudlecommon.response.BaseResponse;import okhttp3.Response;import org.apache.commons.lang3.StringUtils;import org.apache.http.HttpException;import org.apache.http.client.utils.URIBuilder;import org.slf4j.Logger;import org.slf4j.LoggerFactory;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Service;import org.springframework.transaction.annotation.Isolation;import org.springframework.transaction.annotation.Propagation;import org.springframework.transaction.annotation.Transactional;import ucmoudles.systemback.constant.GitHubConstant;import ucmoudles.systemback.constant.SignatureConstant;import ucmoudles.systemback.constant.WeiBoConstant;import ucmoudles.systemback.enums.ErrorCode;import ucmoudles.systemback.exceptions.CommonBusinessException;import ucmoudles.systemback.exceptions.HttpRequestException;import ucmoudles.systemback.feign.service.Feign_Moudle_User;import ucmoudles.systemback.util.OkhttpMethod;import javax.servlet.http.HttpServletRequest;import java.util.HashMap;import java.util.Map;/** * @author 9527 * @ClassName UserOperationBusiness * @Date 2020/1/20 * @Description TODO * @Version 1.0 */@Service("UserOperationBusiness")public class UserLoginCallBackBusiness {    private Logger logger = LoggerFactory.getLogger(UserLoginCallBackBusiness.class);    public Find_UserInfoArg githubCallback(HttpServletRequest request) throws Exception {        String code = request.getParameter("code");        logger.info("Git Hub 返回code为：" + code);        if(StringUtils.isAnyBlank(code)){            throw new HttpRequestException(ErrorCode.LOGINCODEFAIL.getCode(),ErrorCode.HTTPREQUESTFAIL.getMessage(),new HttpException());        }        String accessToken = this.getGithubAccessTokenByCode(code);        String userInfo = this.getGithubUserInfoByToken(accessToken);        JSONObject json = JSONObject.parseObject(userInfo);        String gitId = json.getString("id");        Find_UserInfoArg arg = new Find_UserInfoArg();        arg.setMemGithubUnionId(gitId);        arg.setLoginType("github");        arg.setMemEmail(json.getString("email"));        arg.setMemNickname(json.getString("login"));        arg.setMemAvatarUrl(json.getString("avatar_url"));        arg.setMemSex(0);        arg.setLoginType(GitHubConstant.loginFrom);        arg.setTempToken(accessToken);        return arg;    }    public Find_UserInfoArg weiboCallback(HttpServletRequest request) throws Exception {        String code = request.getParameter("code");        logger.info("Wei Bo 返回code为：" + code);        if(StringUtils.isAnyBlank(code)){            throw new HttpRequestException(ErrorCode.LOGINCODEFAIL.getCode(),ErrorCode.HTTPREQUESTFAIL.getMessage(),new HttpException());        }        Map result = this.getWeiBoAccessTokenByCode(code);        String accessToken = (String)result.get("token");        String uid = (String)result.get("uid");        String userInfo = this.getWeiBoUserInfoByToken(accessToken,uid);        JSONObject json = JSONObject.parseObject(userInfo);        String wbId = json.getString("id");        Find_UserInfoArg arg = new Find_UserInfoArg();        arg.setMemWbUnionId(wbId);        arg.setMemAvatarUrl(json.getString("avatar_hd"));        arg.setMemNickname(json.getString("screen_name"));        arg.setMemLocation(json.getString("location"));        arg.setMemSex(json.getString("gender").equals("f")?2:1);        arg.setLoginType(WeiBoConstant.loginFrom);        arg.setTempToken(accessToken);        //resp = feign_moudle_user.login(param);        return arg;    }    public Map getWeiBoAccessTokenByCode(String code) throws Exception {        if(StringUtils.isBlank(code)){            throw new CommonBusinessException(ErrorCode.NULLPARAMETER.getCode(),ErrorCode.NULLPARAMETER.getMessage());        }        HashMap<String,String> params = new HashMap<>();        params.put("client_id", WeiBoConstant.appKey);        params.put("client_secret",WeiBoConstant.appSecret);        params.put("grant_type","authorization_code");        params.put("code",code);        params.put("redirect_uri", WeiBoConstant.callBack);        Response resp = OkhttpMethod.sendPost(WeiBoConstant.accesstoken,  params);        String body = resp.body().string();        System.out.printf("获取token返回值为：{%s}",body);        if(resp.isSuccessful()){            Map result = new HashMap();            JSONObject obj = JSONObject.parseObject(body);            String token = obj.getString("access_token");            String uid = obj.getString("uid");            result.put("token",token);            result.put("uid",uid);            return result;        }else{            throw new HttpRequestException(ErrorCode.HTTPREQUESTFAIL.getCode(),ErrorCode.HTTPREQUESTFAIL.getMessage()+resp.message(),new HttpException(resp.message()));        }    }    public String getWeiBoUserInfoByToken(String token,String uid) throws Exception {        if(StringUtils.isAnyBlank(token)){            throw new CommonBusinessException(ErrorCode.NULLPARAMETER.getCode(),ErrorCode.NULLPARAMETER.getMessage());        }        URIBuilder builder = new URIBuilder(WeiBoConstant.userinfo);        builder.addParameter("access_token",token);        builder.addParameter("uid",uid);        Response resp = OkhttpMethod.sendGet(builder.build().toString());        String body = resp.body().string();        if(resp.isSuccessful()){            return body;        }else{            throw new HttpRequestException(ErrorCode.HTTPREQUESTFAIL.getCode(),ErrorCode.HTTPREQUESTFAIL.getMessage()+resp.message(),new HttpException(resp.message()));        }    }    public String getGithubAccessTokenByCode(String code) throws Exception {        if(StringUtils.isAnyBlank(code)){            throw new CommonBusinessException(ErrorCode.NULLPARAMETER.getCode(), ErrorCode.NULLPARAMETER.getMessage());        }        HashMap<String,String> params = new HashMap<>();        params.put("client_id", GitHubConstant.CLIENT_ID);        params.put("client_secret",GitHubConstant.CLIENT_SECRET);        params.put("code",code);        String token;        Response resp = OkhttpMethod.sendPost(GitHubConstant.TOKEN_URL,  params);        if(resp.isSuccessful()){            String body = resp.body().string();            token = body.split("&")[0].split("=")[1];            return token;        }else{            throw new HttpRequestException(ErrorCode.HTTPREQUESTFAIL.getCode(),ErrorCode.HTTPREQUESTFAIL.getMessage()+resp.message(),new HttpException(resp.message()));        }    }    public String getGithubUserInfoByToken(String token) throws Exception {        if(StringUtils.isAnyBlank(token)){            throw new CommonBusinessException(ErrorCode.NULLPARAMETER.getCode(),ErrorCode.NULLPARAMETER.getMessage());        }        URIBuilder builder = new URIBuilder(GitHubConstant.USER_INFO_URL);        builder.addParameter("access_token",token);        Response resp = OkhttpMethod.sendGet(builder.build().toString());        if(resp.isSuccessful()){            String body = resp.body().string();            return body;        }else{            throw new HttpRequestException(ErrorCode.HTTPREQUESTFAIL.getCode(),ErrorCode.HTTPREQUESTFAIL.getMessage()+resp.message(),new HttpException(resp.message()));        }    }}