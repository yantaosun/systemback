package ucmoudles.systemback.business;import com.alibaba.fastjson.JSONObject;import com.alibaba.fastjson.JSONPObject;import okhttp3.Response;import org.apache.commons.codec.digest.DigestUtils;import org.apache.commons.lang3.StringUtils;import org.apache.http.HttpException;import org.apache.http.client.utils.URIBuilder;import org.slf4j.Logger;import org.slf4j.LoggerFactory;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Service;import ucmoudles.systemback.config.redis.RedisBusiness;import ucmoudles.systemback.constant.V5Constant;import ucmoudles.systemback.enums.ErrorCode;import ucmoudles.systemback.exceptions.CommonBusinessException;import ucmoudles.systemback.exceptions.HttpRequestException;import ucmoudles.systemback.interfaces.V5OperationInterface;import ucmoudles.systemback.util.OkhttpMethod;import java.io.UnsupportedEncodingException;import java.util.Arrays;import java.util.HashMap;import java.util.Map;/** * @author 9527 * @ClassName V5Business * @Date 2020/2/3 * @Description TODO * @Version 1.0 */@Servicepublic class V5Business implements V5OperationInterface {    private Logger logger = LoggerFactory.getLogger(V5Business.class);    @Autowired    private RedisBusiness redisBusiness;    @Override    public JSONObject v5Token() throws Exception {        String token = redisBusiness.getString("v5token");        if(StringUtils.isBlank(token)){            String timestamp = System.currentTimeMillis()+"";            Map params = new HashMap();            params.put("appid", V5Constant.v5AppId);            params.put("timestamp",timestamp);            String signature = genSignature(V5Constant.v5AppKey,params);            URIBuilder builder = new URIBuilder(V5Constant.v5Token);            builder.addParameter("appid",V5Constant.v5AppId);            builder.addParameter("timestamp",timestamp);            builder.addParameter("signature",signature);            Response resp = OkhttpMethod.sendGet(builder.build().toString());            if(resp.isSuccessful()){                String body = resp.body().string();                JSONObject obj = JSONObject.parseObject(body);                JSONObject data = obj.getJSONObject("data");                token = data.getString("token");                String expire=data.getString("expiresIn");                redisBusiness.set("v5token",token,Long.parseLong(expire));            }else {                return null;            }        }        JSONObject json = new JSONObject();        json.put("token",token);        json.put("host", V5Constant.v5Host);        json.put("name",V5Constant.v5Name);        return  json;    }    @Override    public String verify(String host, String verifyid, String token,String username,String pwd) throws Exception {        String timestamp = System.currentTimeMillis()+"";        Map params = new HashMap();        params.put("verifyid",verifyid);        params.put("token",token);        params.put("timestamp",timestamp);        params.put("CUSTOM_type","login");        String signature = genSignature(V5Constant.v5AppKey,params);        URIBuilder builder = new URIBuilder(V5Constant.v5Verify);        builder.addParameter("host",V5Constant.v5Host);        builder.addParameter("verifyid",verifyid);        builder.addParameter("timestamp",timestamp);        builder.addParameter("signature",signature);        builder.addParameter("token",token);        builder.addParameter("CUSTOM_type","login");        Response resp = OkhttpMethod.sendGet(builder.build().toString());        if(!resp.isSuccessful()){            throw new HttpRequestException(ErrorCode.HTTPREQUESTFAIL.getCode(),ErrorCode.HTTPREQUESTFAIL.getMessage()+resp.message(),new HttpException(resp.message()));        }        String body = resp.body().string();        JSONObject obj = JSONObject.parseObject(body);        String success = obj.getString("success");        if(!"success".equals(success)){            throw new CommonBusinessException(ErrorCode.V5VERIFYFAIL.getCode(),ErrorCode.V5VERIFYFAIL.getMessage());        }        return "0";    }    /**     * 生成签名信息     * @paramappKey产品私钥     * @param params 接口请求参数名和参数值map，不包括signature参数名     * @return     */    public static String genSignature(String appKey, Map params) throws UnsupportedEncodingException {        // 1. 参数名按照ASCII码表升序排序        String[] keys = (String[]) params.keySet().toArray(new String[0]);        Arrays.sort(keys);        // 2. 按照排序拼接参数名与参数值        StringBuilder sb = new StringBuilder();        for (String key : keys) {            sb.append(key).append(params.get(key));        }        // 3. 将secretKey拼接到最后        sb.append(appKey);        // 4. MD5是128位长度的摘要算法，转换为十六进制之后长度为32字符        return DigestUtils.md5Hex(sb.toString().getBytes("UTF-8"));    }}